package stylecode.kosta180.product.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.mahout.cf.taste.common.TasteException;
import org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
import org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood;
import org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender;
import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
import org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity;
import org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;
import org.apache.mahout.cf.taste.recommender.Recommender;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import stylecode.kosta180.domain.MemberVO;
import stylecode.kosta180.product.domain.ProductPageMaker;
import stylecode.kosta180.product.domain.ProductSearchVO;
import stylecode.kosta180.product.domain.ProductVO;
import stylecode.kosta180.product.service.ProductService;

@Controller
public class ProductListController {

	@Inject
	private ProductService service;

	@RequestMapping(value = "/productlist", method = RequestMethod.GET)
	public String productlist(Model model, @ModelAttribute("searchKey") ProductSearchVO searchKey) throws Exception {
		ProductPageMaker pageMaker = new ProductPageMaker();
		model.addAttribute("list", service.listAll(searchKey));
		model.addAttribute("recommendList", service.listRandom());
		pageMaker.setCri(searchKey);
		pageMaker.setTotalCount(service.productListCount(searchKey));
		model.addAttribute("pageMaker", pageMaker);
		return "product/productlist";
	}

	@RequestMapping(value = "/productlistLow", method = RequestMethod.GET)
	public String productlistLow(Model model, @ModelAttribute("searchKey") ProductSearchVO searchKey) throws Exception {
		ProductPageMaker pageMaker = new ProductPageMaker();
		pageMaker.setCri(searchKey);
		pageMaker.setTotalCount(service.productListCount(searchKey));
		model.addAttribute("pageMaker", pageMaker);
		model.addAttribute("list", service.listAllLow(searchKey));
		model.addAttribute("recommendList", service.listRandom());
		System.out.println("낮은가격순");
		return "product/productlist";
	}

	@RequestMapping(value = "/productlistHigh", method = RequestMethod.GET)
	public String productlistHigh(Model model, @ModelAttribute("searchKey") ProductSearchVO searchKey)
			throws Exception {
		ProductPageMaker pageMaker = new ProductPageMaker();
		pageMaker.setCri(searchKey);
		pageMaker.setTotalCount(service.productListCount(searchKey));
		model.addAttribute("pageMaker", pageMaker);
		model.addAttribute("recommendList", service.listRandom());
		model.addAttribute("list", service.listAllHigh(searchKey));
		System.out.println("높은가격순");
		return "product/productlist";
	}

	@RequestMapping(value = "/recommendCheakBox")
	public String testitems(@RequestParam(name = "chk") ArrayList<Integer> penrollno, Model model) throws Exception {
		try {
			DataModel dm = new FileDataModel(new File("C:\\data\\itemcsv.csv"));
			TanimotoCoefficientSimilarity sim = new TanimotoCoefficientSimilarity(dm);
			GenericItemBasedRecommender recommender = new GenericItemBasedRecommender(dm, sim);
			List<Integer> recommendList = new ArrayList<Integer>();

			for (int i = 0; i < penrollno.size(); i++) {
				List<RecommendedItem> recommendations = recommender.mostSimilarItems(penrollno.get(i), 5);
				for (RecommendedItem recommendation : recommendations) {
					System.out.println(
							penrollno.get(i) + "," + recommendation.getItemID() + "," + recommendation.getValue());
					recommendList.add((int) recommendation.getItemID());
				}

			}
			for (int i = 0; i < recommendList.size(); i++) {
				System.out.println("추천상품이들어갓는지 확인하기" + recommendList.get(i));
				System.out.println(recommendList.size() + "갯수:" + i);
			}

			// 체크박스를 클릭한 상품과 현재 상품 penrollNo를 비교해서 갖고옴
			model.addAttribute("list", service.recommendList(recommendList));
			// productlist.jsp 에 있는 모달창을 랜덤으로뿌려주기위한 함수
			model.addAttribute("recommendList", service.listRandom());

		}

		catch (IOException e) {
			System.out.println("error");
		} catch (TasteException e) {
			System.out.println("error2");
			e.printStackTrace();
		}

		return "product/productlist";
	}
	
	
	
	  @RequestMapping(value = "/user")
	   public String UserSimilarity_GET(Model model) throws Exception {
	      System.out.println("*****상품추천시작*****");
	      //System.out.println(mCode);
//	      Long r_mCode = Long.parseLong(String.valueOf(mCode2)) ;

	      // 사용자 아이디
//	      Long r_mCode = Long.parseLong(String.valueOf(mCode));
//	      List<Long> itemList = new ArrayList<Long>();
//	      List<ProductVO> pList = p_service.getAllItemService();
//	      List<ProductVO> allList = new ArrayList<ProductVO>();
	      
	      int i = 0;
	      int j=0;
	      int mCode=1;
	      try {
	         // 데이터 모델 생성
	         DataModel  dm = new FileDataModel(new File("C:\\data\\rate_recommend.csv"));
	         System.out.println("**DataModel : "+dm.toString());

	         // 유사도 모델 선택
	         UserSimilarity sim = new PearsonCorrelationSimilarity(dm);
	         System.out.println("**userSimilarity : "+sim.userSimilarity(4, 5));
	         System.out.println("**userSimilarity : "+sim.userSimilarity(4, 6));
	         System.out.println("**Similarity Model = " + sim.toString());

	         // 유사한 사용자 2명 찾기

//	         UserNeighborhood neighborhood2 =  new NearestNUserNeighborhood(2, sim, dm);
//	         System.out.println("**neighborhood : "+neighborhood2);
//	         System.out.println("**GetUserNeighborhood : "+neighborhood2.getUserNeighborhood(mCode));
	         
	         
	         UserNeighborhood neighbor;
//	         neighbor= new NearestNUserNeighborhood(3, sim, dm);
	         neighbor= new ThresholdUserNeighborhood(0.1, sim, dm);
	         
	         //neighbor is null
//	         if(neighbor.){
//	            System.out.println("neighbor is null");
//	         }else{
//	            
//	            
//	         }
	         System.out.println("****neighbor : "+neighbor.toString());
	         System.out.println("GetUserNeighborhood : "+neighbor.getUserNeighborhood(mCode));

	         // 추천기 선택 : UserBased
	         Recommender recommender = new GenericUserBasedRecommender(dm, neighbor, sim);
	         System.out.println("recommender : "+recommender.toString());
	         System.out.println("**estimatePreference : "+recommender.estimatePreference(4,884));

	         List<RecommendedItem> recommendations = recommender.recommend(mCode, 2);
	         
//	         if(recommendations.isEmpty()){
//	            System.out.println("recommendatios is null");
//	         }else{
//	            
	//
//	         }
	         System.out.println("mCode : "+mCode);
	         System.out.println("추천데이터 : "+recommendations);
	         
	         
	         for (RecommendedItem recommendation : recommendations) {
	            System.out.println("***추천 아이템 : "+recommendation.getItemID()+" : "+recommendation.getValue());
//	            itemList.add(i, recommendation.getItemID());
	            i++;
	         }
	         
//	         System.out.println("추천 아이템 리스트"+itemList.toString());
	         
	         //model.addAttribute("itemList", itemList);
	         
//	         for(int k=0;k<itemList.size();k++){
//	            if(itemList.get(k) == pList.get(j).getpEnrollNo()){
//	               allList.add(pList.get(j));
//	               j++;
//	            }else{
//	               j++;
//	            }
//	         }
//	         System.out.println("**allList : "+allList.toString());
//	         
//	         model.addAttribute("allList",allList);
//	         
//	         

	      } catch (TasteException te) {
	         te.printStackTrace();
	      }
	      return "beforerecommend";
	   }

}
