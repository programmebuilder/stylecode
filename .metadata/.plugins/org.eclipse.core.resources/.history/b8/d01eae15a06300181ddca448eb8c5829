package stylecode.kosta180.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.mahout.cf.taste.common.TasteException;
import org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
import org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender;
import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
import org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import stylecode.kosta180.domain.MemberVO;
import stylecode.kosta180.service.ProductService;

@Controller
public class ProductListController {
	private static final Integer[] String = null;
	/*
	 * private static final Logger logger =
	 * LoggerFactory.getLogger(SecurityController.class);
	 */
	@Inject
	private ProductService service;

	@RequestMapping(value = "/productlist", method = RequestMethod.GET)
	public String productlist(Model model) throws Exception {
		model.addAttribute("list", service.listAll());
		return "product/productlist";
	}

	// 모달 컨트롤러
	@RequestMapping(value = "/recommendCheakBox11", method = RequestMethod.GET)
	public String recommendCheakBox(@RequestParam(name = "chk") ArrayList<Integer> penrollno) {

		for (int i = 0; i < penrollno.size(); i++) {
			System.out.println("penrollno값=" + penrollno.get(i) + "\n");
		}

		return null;

	}

	@RequestMapping(value = "/productlistLow", method = RequestMethod.GET)
	public String productlistLow(Model model) throws Exception {
		model.addAttribute("list", service.listAllLow());

		return "product/productlist";
	}

	@RequestMapping(value = "/productlistHigh", method = RequestMethod.GET)
	public String productlistHigh(Model model) throws Exception {
		model.addAttribute("list", service.listAllHigh());
		return "product/productlist";
	}

	@RequestMapping(value = "/testitem")
	public String testitem() throws Exception {
		// 데이터 파일 읽고 저장한다
		BufferedReader br = new BufferedReader(new FileReader("C:\\data\\u.data"));

		// 읽은 데이터파일을 aa.csv로 떨군다
		BufferedWriter bw = new BufferedWriter(new FileWriter("C:\\data\\aa.csv"));

		String line;
		// line 이라는 string 에 BufferedReader로 읽어온 데이터를 한줄한줄 읽는다.
		// 읽은 데이터를 bw.write로 값마다 ','를 통해 값을 분리해서 넣은다
		while ((line = br.readLine()) != null) {
			String[] values = line.split("\\t", -1);
			bw.write(values[0] + "," + values[1] + "," + values[2] + "\n");

		}
		br.close();
		bw.close();
		return "redirect:/testitem2";
	}

	@RequestMapping(value = "/recommendCheakBox")
	public void testitems(@RequestParam(name = "chk") ArrayList<Integer> penrollno) throws Exception {
		try {
			DataModel dm = new FileDataModel(new File("C:\\data\\rate.csv"));
			TanimotoCoefficientSimilarity sim = new TanimotoCoefficientSimilarity(dm);
			GenericItemBasedRecommender recommender = new GenericItemBasedRecommender(dm, sim);
			int x = 1;

			// 체크스를 4개를 선택하게 한다음 4개를 mostSimailarItems에 넣어야겠다.
			// 넘어온 값을 각각 int값으로 넘긴다음에 그것에 맞춰 if문을 써줌 체크박스가 1일떈 if==변수 한개 써주고
			// 이렇게해야겠다
			// for (LongPrimitiveArrayIterator items =
			// (LongPrimitiveArrayIterator) dm.getItemIDs(); items.hasNext();) {
			// long itemId = items.nextLong();

			for (int i = 0; i < penrollno.size(); i++) {
				List<RecommendedItem> recommendations = recommender.mostSimilarItems(penrollno.get(i), 20);
				for (RecommendedItem recommendation : recommendations) {
					System.out.println(
							penrollno.get(i) + "," + recommendation.getItemID() + "," + recommendation.getValue());

				}

			}
			System.exit(1);

		}

		/*
		 * for (int a = 1; a < 4; a++) { for (RecommendedItem recommendation :
		 * recommendations) { System.out.println(8 + "," +
		 * recommendation.getItemID() + "," + recommendation.getValue());
		 * 
		 * } for (RecommendedItem recommendation : recommendations1) {
		 * System.out.println(7 + "," + recommendation.getItemID() + "," +
		 * recommendation.getValue());
		 * 
		 * } for (RecommendedItem recommendation : recommendations2) {
		 * System.out.println(6 + "," + recommendation.getItemID() + "," +
		 * recommendation.getValue());
		 * 
		 * } System.exit(3); }
		 */

		/*
		 * for (RecommendedItem recommendation : recommendations) {
		 * System.out.println(1024 + "," + recommendation.getItemID() + "," +
		 * recommendation.getValue());
		 * 
		 * }
		 * 
		 * for (RecommendedItem recommendation : recommendations1) {
		 * System.out.println(1022 + "," + recommendation.getItemID() + "," +
		 * recommendation.getValue()); System.exit(3); }
		 * 
		 * 
		 * x++;
		 */

		catch (

		IOException e) {
			System.out.println("error");
		} catch (TasteException e) {
			System.out.println("error2");
			e.printStackTrace();
		}

	}

}