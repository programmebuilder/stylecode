package stylecode.kosta180.service;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;
import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
import org.springframework.stereotype.Service;
import org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity;
import stylecode.kosta180.domain.ProductVO;
import stylecode.kosta180.persistence.ProductDAO;
@Service
public class ProductServiceImpl implements ProductService {
@Inject
private ProductDAO productDao;

	@Override
	public List<ProductVO> listAll() throws Exception {

		return productDao.productlist();
	}

	@Override
	public List<ProductVO> listAllLow() throws Exception {
		
		return productDao.productlistLow();
	}

	@Override
	public List<ProductVO> listAllHigh() throws Exception {
		
		return productDao.productlistHigh();
	}

	@Override
	public List<String> ItemRecommend(String mId) throws Exception {
		List<Map<String, Integer>> list=productDao.ItemRecommendList();
		//파일을 생성함 csv파일
		BufferedWriter bw=new BufferedWriter(new FileWriter("C:\\data\\recommend_item.csv"));
		for(int i=0; i<list.size(); i++){
			bw.write(list.get(i).get("MID")+","+list.get(i).get("PENROLLNO")+"\n");
		}
		bw.close();
		List<Integer> recommendItem_list=ItemRecommend(mId);
		return recommendItem_list;
	}

	@Override
	public List<String> ItemRecommendService(String mId) throws Exception {
		List<Integer> list = new ArrayList<Integer>();
		
		try {
			DataModel dm = new FileDataModel(new File("C\\data\\recommend_item.csv"));
			
			ItemSimilarity sim = new LogLikelihoodSimilarity(dm);
			GenericItemBasedRecommender recommender=new GenericItemBasedRecommender(dm,sim);
			int x=1;
			System.out.println("LogLikelihoodSimailarity이용값"+mId);
			long r_No=Long.parseLong(mId);
			
			List<RecommendedItem> recommendations=recommender.mostSimilarItems(r_No, 3);
			
			for(RecommendedItem recommendation :recommendations){
				System.out.println("추천결과"+mId+","+recommendation.getItemID());
				list.add((int)recommendation.getItemID());
				
			}
			System.out.println(list);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

}
