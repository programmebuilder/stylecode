package stylecode.kosta180.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import stylecode.kosta180.domain.PageMakerVO;
import stylecode.kosta180.domain.ProductVO;
import stylecode.kosta180.persistence.RcDAOImpl;
import stylecode.kosta180.service.RcServiceImpl;

@Controller
@RequestMapping(value="/recommend/*")
public class RecommendController {
	
	@Inject
	private RcServiceImpl service;
	
	@Inject
	private RcDAOImpl dao;
	
	@RequestMapping(value="/")
	public String rcInitialize(Model model){
		try {
			List<ProductVO> prodList = service.selectProductDataService();
			model.addAttribute("prodList", prodList);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return "recommend/rcMain";
	}
		
	@RequestMapping(value="/cgno/{cgno}", method=RequestMethod.GET)
	public ResponseEntity<List<ProductVO>> rcCategory(@PathVariable("cgno") Integer cgno){
		
		ResponseEntity<List<ProductVO>> entity = null;
				
		try {
			entity = new ResponseEntity<>(service.productListService(cgno),HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		
		return entity;
	}

	@RequestMapping(value="/list", method=RequestMethod.GET)
	public String rcPagingList(HttpServletRequest request){
		
		PageMakerVO pageMaker = new PageMakerVO();
		List<ProductVO> productList = null;
		
		int cPageNum = Integer.parseInt(request.getParameter("pageNum"));
		System.out.println("cPageNum : " + cPageNum);
		
		int cContentNum = Integer.parseInt(request.getParameter("contentNum"));
		System.out.println("cContentNum : " + cContentNum);
		
		pageMaker.setTotalCount(dao.productCount()); //전체 게시글 개수 지정.
		pageMaker.setPageNum(cPageNum-1); //현재 페이지를 페이지 객체에 지정.
		pageMaker.setContentNum(cContentNum); //한 페이지에 몇개씩 게시글을 보여줄지 지정.
		pageMaker.setCurrentBlock(cPageNum); //현재 페이지 블록이 몇번인지 현재 페이지 번호를 통해서 지정.
		pageMaker.setLastBlock(pageMaker.getTotalCount()); //마지막 블록 번호를 전체 게시글 수를 통해서 지정. 
		
		pageMaker.prevNext(cPageNum); //현재 페이지 번호로 화살표를 나타낼지 지정한다.
		pageMaker.setStartPage(pageMaker.getCurrentBlock()); //시작 페이지를 페이지 블록 번호로 정한다.
		pageMaker.setEndPage(pageMaker.getLastBlock(), pageMaker.getCurrentBlock()); 
		//마지막 페이지를 마지막 페이지 블록과 현재 페이지 블록 번호로 정한다.
		
		try {
			productList = service.productPagingListService(pageMaker);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		request.setAttribute("productList", productList);
		request.setAttribute("pageMaker", pageMaker);
		
		return "recommend/rcMain";
	}
	
	
}
